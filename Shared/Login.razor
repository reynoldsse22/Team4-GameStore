@page "/login"
@inherits LayoutComponentBase;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject UserDbService UserDbService
@inject NavigationManager UriHelper

<EditForm Model="@users" OnValidSubmit="@ValidateUser">
    <center> 
        <div>
            <br /> <br /> <br /> 
        </div>
        <div class="border col-5"> 
            <div class="col-12">
                <h3 style = "color=Red; font-weight: bold">Blockbuster Login</h3>
            </div>
            <div>
                <br />
                <div class="red"> @list </div>
                <br />
            </div>
            <div class="col-10">
                <input class="form-control inputs" @bind="@users.Email" placeholder="Email Address" />
            </div>
            <div>
                <br />
            </div>
            <div class="col-10">
                <input class="form-control inputs" @bind="@users.Password" placeholder="Password" />
            </div>
            <br />
            <div class="col-5">
                <input type="submit" class="form-control btn btn-primary" value="Login" />
            </div>
        </div>
    </center>
</EditForm>

@code {
    private User users;
    private string list;
    protected override Task OnInitializedAsync()
    {
        users = new User();
        return base.OnInitializedAsync();
    }
    private async Task<bool> ValidateUser()
    {
        int count = 0;
        List<User> people;
        people = await UserDbService.GetUsers();

        foreach(User u in people)
        {
            if(users.Email == u.Email)
            {
                if(users.Password == u.Password)
                {
                    ((CustomAuthProvider)AuthenticationStateProvider).MakeUserAuth(u.FirstName);
                    NavigationManager.NavigateTo("/games");
                    await sessionStorage.SetItemAsync("email", users.Email);
                    count++;
                }
            }
        }
        if(count == 0)
        {
            list = "Wrong Username or Password";
        }

        return await Task.FromResult(true);
    }

    
}
