@page "/"

@inject GameDbService service

<div class="container">

    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Product Id</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Description</th>
                    <th>Delete Product</th>
                </tr>
            </thead>
            <tbody>
                @if (Games.Any())
                {
                    @foreach (var game in Games)
                    {
                        <tr @onclick="(() => SetProductForUpdate(game))">
                            <td>@game.ID</td>
                            <td>@game.Name</td>
                            <td>@game.Price</td>
                            <td>@game.Quantity</td>
                            <td>@game.Description</td>
                            <td><button class="btn btn-danger" @onclick="(() => DeleteGame(game))">Delete</button></td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="6"><strong>No products available</strong></td></tr>
                }
            </tbody>
        </table>
    </div>

    <div class="row m-5">
        <div class="col-5 bg-light m-2 justify-content-start">

            <div class="p-3 mb-3 bg-primary text-white text-center">Add New Product</div>

            <EditForm Model="@NewGame">
                <div class="form-group">
                    <label for="name">Product Name</label>
                    <input type="text" id="name" class="form-control" @bind-value="@NewGame.Name" />
                </div>

                <div class="form-group">
                    <label for="price">Price</label>
                    <input type="text" id="price" class="form-control" @bind="@NewGame.Price" />
                </div>

                <div class="form-group">
                    <label for="quantity">Quantity</label>
                    <input type="text" id="quantity" class="form-control" @bind="@NewGame.Quantity" />
                </div>

                <div class="form-group">
                    <label for="Description">Description</label>
                    <input type="text" id="Description" class="form-control" @bind="@NewGame.Description" />
                </div>

                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="AddNewGame"> Add Product</button>
                </div>
            </EditForm>
        </div>

        <div class="col-5 bg-light m-2 justify-content-end">
            <div class="p-3 mb-1 bg-primary text-white text-center">Update Product</div>

            <EditForm Model="@UpdateGame">
                <div class="form-group">
                    <label for="name">Game Name</label>
                    <input type="text" id="name" class="form-control" @bind-value="@UpdateGame.Name" />
                </div>

                <div class="form-group">
                    <label for="price">Price</label>
                    <input type="text" id="price" class="form-control" @bind="@UpdateGame.Price" />
                </div>

                <div class="form-group">
                    <label for="quantity">Quantity</label>
                    <input type="text" id="quantity" class="form-control" @bind="@UpdateGame.Quantity" />
                </div>

                <div class="form-group">
                    <label for="Description">Description</label>
                    <input type="text" id="Description" class="form-control" @bind="@UpdateGame.Description" />
                </div>

                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="UpdateGameData"> Update Game</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    List<Game> Games = new List<Game>();
    protected override async Task OnInitializedAsync()
    {
        await RefreshGames();
    }

    private async Task RefreshGames()
    {
        Games = await service.GetGames();
    }

    public Game NewGame { get; set; } = new Game();
    private async Task AddNewGame()
    {
        await service.AddGameAsync(NewGame);
        NewGame = new Game();
        await RefreshGames();
    }

    Game UpdateGame = new Game();
    private void SetProductForUpdate(Game game)
    {
        UpdateGame = game;
    }

    private async Task UpdateGameData()
    {
        await service.UpdateGameAsync(UpdateGame);
        await RefreshGames();
    }

    private async Task DeleteGame(Game game)
    {
        await service.DeleteGameAsync(game);
        await RefreshGames();
    } 
}